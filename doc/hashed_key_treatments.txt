This file is to describe the steps to properly apply the "hashed_key" treatment to new models added/updated. Normally the only changes needed are very minor and in Serializer and View Tests only.

1. For any new serializers
    a. Make the new serializer to extend the right base class, so that the "id" field is automatically hashed.
        i.  import the right base class: "from hash_pk_serializer_base import HashPkSerializerBase"
        ii. Make the new serializer to extend this base class "HashPkSerializerBase".
    b. Avoid usage of "depth" option in the serializer
        i. Serialize the fields with the corresponding serializer instead.
    c. In the case where we want to only serialize out an ID and not the entire data model
        i.   Import a custom field class: "from custom_fields.hash_field import HashField"
        ii.  Set the ID only fields to use this "HashField" type
             e.g. "user = HashField(source="user.id")"
        iii. Create a separate "POST" verion serializer that does not use the "HashField" for POSTs. And make the "POST" action in the view to use this serializer. 

2. Make sure that "view" unit tests pass the proper hashed IDs into the views being tested.
    a. Make the unit test class to extend the proper base class
        i.  "from view_test_base import ViewTestBase"
        ii. add the base class "ViewTestBase" as the secondary class to extend for the view test class. 
            e.g. "class DirectDepositTestCase(TestCase, ViewTestBase):"
    b. Use the utility function provided by the base class, "self.normalize_key(intID)" to hash integer keys:
        i.  before passing them to the view as inputs
            e.g. "response = self.client.get(reverse('direct_deposit_api', kwargs={'pk': self.normalize_key(1)}))"
        ii. when checking returned results from views
            e.g. "self.assertEqual(result[0]['user'], self.normalize_key(1))"

3. Make sure the URL rule allow alpha-numerical ID, and not just integers.
    a. E.g. (?P<pk>\w+) 

To see these in code, please use FSA setup as an example:
- Serializer: https://github.com/smoothbenefits/BenefitMY_Python/blob/master/app/serializers/fsa_serializer.py 
- View: https://github.com/smoothbenefits/BenefitMY_Python/blob/master/app/views/fsa_view.py
- View tests: https://github.com/smoothbenefits/BenefitMY_Python/blob/master/app/views/tests/test_fsa_view.py 